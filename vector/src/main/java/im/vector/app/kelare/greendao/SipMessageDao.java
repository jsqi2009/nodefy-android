package im.vector.app.kelare.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import im.vector.app.kelare.network.models.SipMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIP_MESSAGE".
*/
public class SipMessageDao extends AbstractDao<SipMessage, Long> {

    public static final String TABLENAME = "SIP_MESSAGE";

    /**
     * Properties of entity SipMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Chat_room_id = new Property(1, String.class, "chat_room_id", false, "CHAT_ROOM_ID");
        public final static Property Received_username = new Property(2, String.class, "received_username", false, "RECEIVED_USERNAME");
        public final static Property Received_domain = new Property(3, String.class, "received_domain", false, "RECEIVED_DOMAIN");
        public final static Property Send_username = new Property(4, String.class, "send_username", false, "SEND_USERNAME");
        public final static Property Send_domain = new Property(5, String.class, "send_domain", false, "SEND_DOMAIN");
        public final static Property Message_text = new Property(6, String.class, "message_text", false, "MESSAGE_TEXT");
        public final static Property Timestamp = new Property(7, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property IsSend = new Property(8, boolean.class, "isSend", false, "IS_SEND");
    }


    public SipMessageDao(DaoConfig config) {
        super(config);
    }
    
    public SipMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIP_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAT_ROOM_ID\" TEXT," + // 1: chat_room_id
                "\"RECEIVED_USERNAME\" TEXT," + // 2: received_username
                "\"RECEIVED_DOMAIN\" TEXT," + // 3: received_domain
                "\"SEND_USERNAME\" TEXT," + // 4: send_username
                "\"SEND_DOMAIN\" TEXT," + // 5: send_domain
                "\"MESSAGE_TEXT\" TEXT," + // 6: message_text
                "\"TIMESTAMP\" INTEGER," + // 7: timestamp
                "\"IS_SEND\" INTEGER NOT NULL );"); // 8: isSend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIP_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SipMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chat_room_id = entity.getChat_room_id();
        if (chat_room_id != null) {
            stmt.bindString(2, chat_room_id);
        }
 
        String received_username = entity.getReceived_username();
        if (received_username != null) {
            stmt.bindString(3, received_username);
        }
 
        String received_domain = entity.getReceived_domain();
        if (received_domain != null) {
            stmt.bindString(4, received_domain);
        }
 
        String send_username = entity.getSend_username();
        if (send_username != null) {
            stmt.bindString(5, send_username);
        }
 
        String send_domain = entity.getSend_domain();
        if (send_domain != null) {
            stmt.bindString(6, send_domain);
        }
 
        String message_text = entity.getMessage_text();
        if (message_text != null) {
            stmt.bindString(7, message_text);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(8, timestamp);
        }
        stmt.bindLong(9, entity.getIsSend() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SipMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chat_room_id = entity.getChat_room_id();
        if (chat_room_id != null) {
            stmt.bindString(2, chat_room_id);
        }
 
        String received_username = entity.getReceived_username();
        if (received_username != null) {
            stmt.bindString(3, received_username);
        }
 
        String received_domain = entity.getReceived_domain();
        if (received_domain != null) {
            stmt.bindString(4, received_domain);
        }
 
        String send_username = entity.getSend_username();
        if (send_username != null) {
            stmt.bindString(5, send_username);
        }
 
        String send_domain = entity.getSend_domain();
        if (send_domain != null) {
            stmt.bindString(6, send_domain);
        }
 
        String message_text = entity.getMessage_text();
        if (message_text != null) {
            stmt.bindString(7, message_text);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(8, timestamp);
        }
        stmt.bindLong(9, entity.getIsSend() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SipMessage readEntity(Cursor cursor, int offset) {
        SipMessage entity = new SipMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chat_room_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // received_username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // received_domain
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // send_username
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // send_domain
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // message_text
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // timestamp
            cursor.getShort(offset + 8) != 0 // isSend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SipMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChat_room_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceived_username(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReceived_domain(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSend_username(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSend_domain(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessage_text(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimestamp(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIsSend(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SipMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SipMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SipMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
