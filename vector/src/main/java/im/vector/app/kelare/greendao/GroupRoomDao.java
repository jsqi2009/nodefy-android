package im.vector.app.kelare.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import im.vector.app.kelare.network.models.GroupRoom;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_ROOM".
*/
public class GroupRoomDao extends AbstractDao<GroupRoom, Long> {

    public static final String TABLENAME = "GROUP_ROOM";

    /**
     * Properties of entity GroupRoom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Group_room_id = new Property(1, String.class, "group_room_id", false, "GROUP_ROOM_ID");
        public final static Property Group_room_name = new Property(2, String.class, "group_room_name", false, "GROUP_ROOM_NAME");
        public final static Property Latest_message = new Property(3, String.class, "latest_message", false, "LATEST_MESSAGE");
        public final static Property Message_from = new Property(4, String.class, "message_from", false, "MESSAGE_FROM");
        public final static Property Room_owner = new Property(5, String.class, "room_owner", false, "ROOM_OWNER");
        public final static Property Participants = new Property(6, String.class, "participants", false, "PARTICIPANTS");
    }


    public GroupRoomDao(DaoConfig config) {
        super(config);
    }
    
    public GroupRoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_ROOM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_ROOM_ID\" TEXT," + // 1: group_room_id
                "\"GROUP_ROOM_NAME\" TEXT," + // 2: group_room_name
                "\"LATEST_MESSAGE\" TEXT," + // 3: latest_message
                "\"MESSAGE_FROM\" TEXT," + // 4: message_from
                "\"ROOM_OWNER\" TEXT," + // 5: room_owner
                "\"PARTICIPANTS\" TEXT);"); // 6: participants
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_ROOM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupRoom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String group_room_id = entity.getGroup_room_id();
        if (group_room_id != null) {
            stmt.bindString(2, group_room_id);
        }
 
        String group_room_name = entity.getGroup_room_name();
        if (group_room_name != null) {
            stmt.bindString(3, group_room_name);
        }
 
        String latest_message = entity.getLatest_message();
        if (latest_message != null) {
            stmt.bindString(4, latest_message);
        }
 
        String message_from = entity.getMessage_from();
        if (message_from != null) {
            stmt.bindString(5, message_from);
        }
 
        String room_owner = entity.getRoom_owner();
        if (room_owner != null) {
            stmt.bindString(6, room_owner);
        }
 
        String participants = entity.getParticipants();
        if (participants != null) {
            stmt.bindString(7, participants);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupRoom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String group_room_id = entity.getGroup_room_id();
        if (group_room_id != null) {
            stmt.bindString(2, group_room_id);
        }
 
        String group_room_name = entity.getGroup_room_name();
        if (group_room_name != null) {
            stmt.bindString(3, group_room_name);
        }
 
        String latest_message = entity.getLatest_message();
        if (latest_message != null) {
            stmt.bindString(4, latest_message);
        }
 
        String message_from = entity.getMessage_from();
        if (message_from != null) {
            stmt.bindString(5, message_from);
        }
 
        String room_owner = entity.getRoom_owner();
        if (room_owner != null) {
            stmt.bindString(6, room_owner);
        }
 
        String participants = entity.getParticipants();
        if (participants != null) {
            stmt.bindString(7, participants);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupRoom readEntity(Cursor cursor, int offset) {
        GroupRoom entity = new GroupRoom( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // group_room_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_room_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // latest_message
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message_from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // room_owner
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // participants
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupRoom entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_room_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroup_room_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatest_message(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessage_from(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoom_owner(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParticipants(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupRoom entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupRoom entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupRoom entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
