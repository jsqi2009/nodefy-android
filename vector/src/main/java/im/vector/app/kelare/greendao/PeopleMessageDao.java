package im.vector.app.kelare.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import im.vector.app.kelare.network.models.PeopleMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEOPLE_MESSAGE".
*/
public class PeopleMessageDao extends AbstractDao<PeopleMessage, Void> {

    public static final String TABLENAME = "PEOPLE_MESSAGE";

    /**
     * Properties of entity PeopleMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property People_room_id = new Property(0, String.class, "people_room_id", false, "PEOPLE_ROOM_ID");
        public final static Property Login_account_jid = new Property(1, String.class, "login_account_jid", false, "LOGIN_ACCOUNT_JID");
        public final static Property Login_name = new Property(2, String.class, "login_name", false, "LOGIN_NAME");
        public final static Property Chat_with_jid = new Property(3, String.class, "chat_with_jid", false, "CHAT_WITH_JID");
        public final static Property Message = new Property(4, String.class, "message", false, "MESSAGE");
        public final static Property IsSend = new Property(5, Boolean.class, "isSend", false, "IS_SEND");
        public final static Property Timestamp = new Property(6, long.class, "timestamp", false, "TIMESTAMP");
    }


    public PeopleMessageDao(DaoConfig config) {
        super(config);
    }
    
    public PeopleMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEOPLE_MESSAGE\" (" + //
                "\"PEOPLE_ROOM_ID\" TEXT," + // 0: people_room_id
                "\"LOGIN_ACCOUNT_JID\" TEXT," + // 1: login_account_jid
                "\"LOGIN_NAME\" TEXT," + // 2: login_name
                "\"CHAT_WITH_JID\" TEXT," + // 3: chat_with_jid
                "\"MESSAGE\" TEXT," + // 4: message
                "\"IS_SEND\" INTEGER," + // 5: isSend
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 6: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEOPLE_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PeopleMessage entity) {
        stmt.clearBindings();
 
        String people_room_id = entity.getPeople_room_id();
        if (people_room_id != null) {
            stmt.bindString(1, people_room_id);
        }
 
        String login_account_jid = entity.getLogin_account_jid();
        if (login_account_jid != null) {
            stmt.bindString(2, login_account_jid);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(3, login_name);
        }
 
        String chat_with_jid = entity.getChat_with_jid();
        if (chat_with_jid != null) {
            stmt.bindString(4, chat_with_jid);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
 
        Boolean isSend = entity.getIsSend();
        if (isSend != null) {
            stmt.bindLong(6, isSend ? 1L: 0L);
        }
        stmt.bindLong(7, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PeopleMessage entity) {
        stmt.clearBindings();
 
        String people_room_id = entity.getPeople_room_id();
        if (people_room_id != null) {
            stmt.bindString(1, people_room_id);
        }
 
        String login_account_jid = entity.getLogin_account_jid();
        if (login_account_jid != null) {
            stmt.bindString(2, login_account_jid);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(3, login_name);
        }
 
        String chat_with_jid = entity.getChat_with_jid();
        if (chat_with_jid != null) {
            stmt.bindString(4, chat_with_jid);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
 
        Boolean isSend = entity.getIsSend();
        if (isSend != null) {
            stmt.bindLong(6, isSend ? 1L: 0L);
        }
        stmt.bindLong(7, entity.getTimestamp());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PeopleMessage readEntity(Cursor cursor, int offset) {
        PeopleMessage entity = new PeopleMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // people_room_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // login_account_jid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // login_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chat_with_jid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isSend
            cursor.getLong(offset + 6) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PeopleMessage entity, int offset) {
        entity.setPeople_room_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLogin_account_jid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogin_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChat_with_jid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsSend(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setTimestamp(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PeopleMessage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PeopleMessage entity) {
        return null;
    }

    @Override
    public boolean hasKey(PeopleMessage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
