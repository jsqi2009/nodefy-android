package im.vector.app.kelare.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import im.vector.app.kelare.network.models.GroupMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_MESSAGE".
*/
public class GroupMessageDao extends AbstractDao<GroupMessage, Void> {

    public static final String TABLENAME = "GROUP_MESSAGE";

    /**
     * Properties of entity GroupMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Group_room_id = new Property(0, String.class, "group_room_id", false, "GROUP_ROOM_ID");
        public final static Property Group_room_name = new Property(1, String.class, "group_room_name", false, "GROUP_ROOM_NAME");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property Message_from = new Property(3, String.class, "message_from", false, "MESSAGE_FROM");
        public final static Property Timestamp = new Property(4, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property IsRead = new Property(5, boolean.class, "isRead", false, "IS_READ");
        public final static Property IsSend = new Property(6, boolean.class, "isSend", false, "IS_SEND");
    }


    public GroupMessageDao(DaoConfig config) {
        super(config);
    }
    
    public GroupMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_MESSAGE\" (" + //
                "\"GROUP_ROOM_ID\" TEXT," + // 0: group_room_id
                "\"GROUP_ROOM_NAME\" TEXT," + // 1: group_room_name
                "\"MESSAGE\" TEXT," + // 2: message
                "\"MESSAGE_FROM\" TEXT," + // 3: message_from
                "\"TIMESTAMP\" INTEGER," + // 4: timestamp
                "\"IS_READ\" INTEGER NOT NULL ," + // 5: isRead
                "\"IS_SEND\" INTEGER NOT NULL );"); // 6: isSend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupMessage entity) {
        stmt.clearBindings();
 
        String group_room_id = entity.getGroup_room_id();
        if (group_room_id != null) {
            stmt.bindString(1, group_room_id);
        }
 
        String group_room_name = entity.getGroup_room_name();
        if (group_room_name != null) {
            stmt.bindString(2, group_room_name);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
 
        String message_from = entity.getMessage_from();
        if (message_from != null) {
            stmt.bindString(4, message_from);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsSend() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupMessage entity) {
        stmt.clearBindings();
 
        String group_room_id = entity.getGroup_room_id();
        if (group_room_id != null) {
            stmt.bindString(1, group_room_id);
        }
 
        String group_room_name = entity.getGroup_room_name();
        if (group_room_name != null) {
            stmt.bindString(2, group_room_name);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
 
        String message_from = entity.getMessage_from();
        if (message_from != null) {
            stmt.bindString(4, message_from);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsSend() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GroupMessage readEntity(Cursor cursor, int offset) {
        GroupMessage entity = new GroupMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // group_room_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // group_room_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message_from
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // timestamp
            cursor.getShort(offset + 5) != 0, // isRead
            cursor.getShort(offset + 6) != 0 // isSend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupMessage entity, int offset) {
        entity.setGroup_room_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroup_room_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage_from(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIsRead(cursor.getShort(offset + 5) != 0);
        entity.setIsSend(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GroupMessage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GroupMessage entity) {
        return null;
    }

    @Override
    public boolean hasKey(GroupMessage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
